/* generated by dia/codegen.py */
/*(NULL)*/
class SceneManager 
{
public:
	void addNode (SceneNode * node);
	void drawScene ();
	SceneManager (_shaderProgram shaderProgram);
	std::list _nodes;
	ShaderProgram * _shaderProgram;
};

/*(NULL)*/
class SceneNode 
{
public:
	void setZRotation (float angle);
	void setPosition (float x,
	                  float y,
	                  float z);
	SceneNode (SceneManager * manager);
	void transverse ();
	SceneManager * _manager;
	Matrix _modelMatrix;
	Matrix _translationMatrix;
	Matrix _rotationMatrix;
	Mesh * _mesh;
};

/*(NULL)*/
class MeshBuilder 
{
public:
	void beginMesh ();
	Mesh endMesh() ();
	void position (float x,
	               float y,
	               float z);
	void color (float r,
	            float g,
	            float b,
	            float a);
	void index (int ind);
	 _verticies;
	 _indices;
};

/*(NULL)*/
class Shader 
{
public:
	 id ();
	Shader buildShaderFromFile (std::string fileName);
	std::string shaderFileName ();
	 _id;
	std::string _shaderFileName;
};

/*(NULL)*/
class ShaderProgram 
{
public:
	 id ();
	Shader * vertexShader ();
	Shader * fragmentShader ();
	ShaderProgram buildShaderProgram (Shader * vertexShader,
	                                  Shader * fragmentShader);
	ShaderProgram (Shader * vertexShader,
	               Shader * fragmentShader);
	 _id;
	Shader * _vertexShader;
	Shader * _fragmentShader;
};

/*(NULL)*/
class Mesh 
{
public:
	void draw ();
	Mesh extrude (float vx,
	              float vy,
	              float vz);
	std::vector _vertices;
	std::vector _indices;
private:
	Mesh (std::vector _vertices);
};

